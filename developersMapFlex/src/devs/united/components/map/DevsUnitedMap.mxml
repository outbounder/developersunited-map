<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo" 
	xmlns:maps="com.google.maps.*"
	currentState="loading"
	creationComplete="group1_creationCompleteHandler(event)">
	
	<fx:Metadata>
		[Event(name='complete', type='flash.events.Event')]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import lib.rest.RestLoaderEvent;
			import devs.united.controller.AppMainController;
			import devs.united.data.access.DevMapService;
			import com.google.maps.interfaces.IOverlay;
			import mx.events.FlexEvent;
			import spark.effects.easing.Sine;
			import mx.effects.easing.Bounce;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.MapAction;
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.overlays.Marker;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapType;
			import com.google.maps.LatLng;
			import com.google.maps.MapEvent;
			
			[Bindable]
			public var devService:DevMapService;
			[Bindable]
			public var appMainCtrl:AppMainController;
			
			private var markers:Array = new Array();			

			protected function map_mapevent_mapreadyHandler(event:MapEvent):void
			{
				cursorManager.removeBusyCursor();
				this.currentState = 'ready';
				
				map.setCenter(new LatLng(37.4419, -122.1419), 1, MapType.HYBRID_MAP_TYPE);
				this.dispatchEvent(new Event(Event.COMPLETE));
			}
			
			public function clearMarkers():void
			{
				for each(var marker:IOverlay in this.markers)
					this.map.removeOverlay(marker);
				this.markers = new Array();
			}
			
			public function createRandomMarker():Marker
			{
				var bounds:LatLngBounds = map.getLatLngBounds();
				var southWest:LatLng = bounds.getSouthWest();
				var northEast:LatLng = bounds.getNorthEast();
				var lngSpan:Number = northEast.lng() - southWest.lng();
				var latSpan:Number = northEast.lat() - southWest.lat();
				var latlng:LatLng = new LatLng(southWest.lat() + latSpan * Math.random(),
					southWest.lng() + lngSpan * Math.random());
				var marker:Marker = createMarker(latlng,true); 
				return marker;
			}
			
			public function createMarker(latlng:LatLng, draggable:Boolean):Marker 
			{
				var options:MarkerOptions = null;
				if(draggable)
					options = new MarkerOptions({draggable: true});
				var marker:Marker = new Marker(latlng, options);
				if(draggable)
					marker.addEventListener(MapMouseEvent.DRAG_END, onMarkerDragEnd);
				this.markers.push(marker);
				this.map.addOverlay(marker);
				return marker;
			}

			protected function map_clickHandler(event:MouseEvent):void
			{
				trace(event);
			}


			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				cursorManager.setBusyCursor();
			}
			
			private function onMarkerDragEnd(e:MapMouseEvent):void
			{
				cursorManager.setBusyCursor();
				this.appMainCtrl.dev.latitude = String((e.target as Marker).getLatLng().lat());
				this.appMainCtrl.dev.longitude = String((e.target as Marker).getLatLng().lng());
				this.devService.setDevToMap(this.appMainCtrl.dev, onSetResult);
			}
			
			private function onSetResult(e:RestLoaderEvent):void
			{
				cursorManager.removeBusyCursor();
			}

		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:states>
		<s:State name="loading" />
		<s:State name="ready" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="loading" toState="ready">
			<s:Parallel startDelay="200">
				<s:Rotate3D target="{this.map}" easer="{new Sine()}" suspendBackgroundProcessing="true" />
				<s:Fade target="{this.map}" />	
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	<maps:Map id="map" width="100%" height="100%" 
		key="ABQIAAAAAIm5L_FulZ7vCmMVn-U2ohRiUBOfUWQzQicq35-5rYlY2Tx9QBSfvJUF0YgXVZRfo17uxY9sSvoIiw"
		mapevent_mapready="map_mapevent_mapreadyHandler(event)"
		click="map_clickHandler(event)"
		rotationX.loading="90"
		rotationX.ready="0"
		alpha="0" alpha.ready='1.0'/>	
	
</s:Group>
